# -*- coding: utf-8 -*-
"""Baby_Acapulco_Power BI_Weekly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vXVW-yNPJzG_kynYDlzHg09LL1HhI2nk
"""

# menu_sync.py - Fetch and upload Toast menu structure to Supabase


from supabase import create_client
import requests

# ---------- CONFIGURATION ----------
SUPABASE_URL = "https://grzslnrsrdxywilzhmdf.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdyenNsbnJzcmR4eXdpbHpobWRmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MDMyNDAsImV4cCI6MjA2ODI3OTI0MH0.qWpAlLM9Y5RAvSSfDpG_cANpilu6Ui1Kq-od0fcceMA"
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

TOAST_API = "https://ws-api.toasttab.com"
RESTAURANT_ID = "50938580-a665-4908-8f76-751f2ea53009"
TOAST_CLIENT_ID = "Os6cEHukLlZG4nsB9L9yAw5ClYYNWr1r"
TOAST_CLIENT_SECRET = "InK0V7Kk26xAt3ZAVk_A-tNYszBQM7rf2t31jpmuxwgwhGIRxYGryB93H1sRHb0s"

# ---------- AUTHENTICATE ----------
def authenticate():
    res = requests.post(
        f"{TOAST_API}/authentication/v1/authentication/login",
        json={
            "userAccessType": "TOAST_MACHINE_CLIENT",
            "clientId": TOAST_CLIENT_ID,
            "clientSecret": TOAST_CLIENT_SECRET
        }
    )
    res.raise_for_status()
    token = res.json()['token']['accessToken']
    return {
        "Authorization": f"Bearer {token}",
        "Toast-Restaurant-External-ID": RESTAURANT_ID
    }

# ---------- UTILITY ----------
def try_upsert(table, rows, conflict_key, chunk_size=200):
    if not rows:
        print(f"‚ö†Ô∏è No data for {table}")
        return

    # Deduplicate rows by conflict_key
    seen = set()
    deduped = []
    for row in rows:
        key = row.get(conflict_key)
        if key and key not in seen:
            seen.add(key)
            deduped.append(row)

    print(f"üì¶ Upserting {len(deduped)} rows into {table}...")

    for i in range(0, len(deduped), chunk_size):
        chunk = deduped[i:i + chunk_size]
        try:
            supabase.table(table).upsert(chunk, on_conflict=[conflict_key]).execute()
            print(f"‚úÖ Uploaded chunk {i // chunk_size + 1} of {((len(deduped) - 1) // chunk_size + 1)} to {table}")
        except Exception as e:
            print(f"‚ùå Chunk {i // chunk_size + 1} failed for {table}: {e}")

# ---------- FETCH & UPLOAD FULL MENU STRUCTURE ----------
def sync_full_menu(headers):
    print("üì¶ Fetching menu structure...")

    menus = requests.get(f"{TOAST_API}/config/v2/menus", headers=headers).json()
    if not menus:
        print("‚ùå No menus found.")
        return

    groups_data = []
    items_data = []
    modifiers_data = []
    option_groups_data = []

    for menu in menus:
        for g_ref in menu.get("groups", []):
            group = requests.get(f"{TOAST_API}/config/v2/menuGroups/{g_ref['guid']}", headers=headers).json()
            groups_data.append({
                "guid": group.get("guid"),
                "name": group.get("name"),
                "external_id": group.get("externalId"),
                "menu_guid": menu.get("guid"),
                "unit_of_measure": group.get("unitOfMeasure"),
                "orderable_online": group.get("orderableOnline"),
                "visibility": group.get("visibility"),
                "subgroups": str(group.get("subgroups")),
                "option_groups": str(group.get("optionGroups")),
            })

            for item_ref in group.get("items", []):
                item = requests.get(f"{TOAST_API}/config/v2/menuItems/{item_ref['guid']}", headers=headers).json()
                items_data.append({
                    "guid": item.get("guid"),
                    "name": item.get("name"),
                    "external_id": item.get("externalId"),
                    "plu": item.get("plu"),
                    "sku": item.get("sku"),
                    "calories": item.get("calories"),
                    "type": item.get("type"),
                    "unit_of_measure": item.get("unitOfMeasure"),
                    "orderable_online": item.get("orderableOnline"),
                    "visibility": item.get("visibility"),
                })

                for opt_group_ref in item.get("optionGroups", []):
                    og = requests.get(f"{TOAST_API}/config/v2/menuOptionGroups/{opt_group_ref['guid']}", headers=headers).json()
                    option_groups_data.append({
                        "guid": og.get("guid"),
                        "name": og.get("name"),
                        "external_id": og.get("externalId"),
                        "min_selections": og.get("minSelections"),
                        "max_selections": og.get("maxSelections"),
                        "options": str(og.get("options")),
                    })

                    for opt in og.get("options", []):
                        mod = requests.get(f"{TOAST_API}/config/v2/menuItems/{opt['guid']}", headers=headers).json()
                        modifiers_data.append({
                            "guid": mod.get("guid"),
                            "name": mod.get("name"),
                            "external_id": mod.get("externalId"),
                            "plu": mod.get("plu"),
                            "sku": mod.get("sku"),
                            "calories": mod.get("calories"),
                            "type": mod.get("type"),
                            "unit_of_measure": mod.get("unitOfMeasure"),
                            "orderable_online": mod.get("orderableOnline"),
                            "visibility": mod.get("visibility"),
                        })

    try_upsert("toast_menu_groups_baby_acapulco", groups_data, "guid")
    try_upsert("toast_menu_items_baby_acapulco", items_data, "guid")
    try_upsert("toast_menu_modifiers_baby_acapulco", modifiers_data, "guid")
    try_upsert("toast_menu_option_groups_baby_acapulco", option_groups_data, "guid")

# ---------- MAIN ----------
if __name__ == "__main__":
    headers = authenticate()
    sync_full_menu(headers)