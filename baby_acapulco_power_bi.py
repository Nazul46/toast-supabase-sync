# -*- coding: utf-8 -*-
"""Baby_Acapulco_Power BI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kjGONiUJBokrYTXtkCh1Vxj_0x5z4SXv
"""

# Install dependencies
!pip install supabase requests pytz --quiet

from supabase import create_client
import requests
import datetime
import pytz

# ---------- CONFIGURATION ----------
# Supabase credentials
url = "https://grzslnrsrdxywilzhmdf.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdyenNsbnJzcmR4eXdpbHpobWRmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MDMyNDAsImV4cCI6MjA2ODI3OTI0MH0.qWpAlLM9Y5RAvSSfDpG_cANpilu6Ui1Kq-od0fcceMA"
supabase = create_client(url, key)

# ---------- RESTAURANT INFO ----------
RESTAURANT_NAME = "Baby Acapulco - Stonelake"
RESTAURANT_ID = "50938580-a665-4908-8f76-751f2ea53009"
TOAST_CLIENT_ID = "Os6cEHukLlZG4nsB9L9yAw5ClYYNWr1r"
TOAST_CLIENT_SECRET = "InK0V7Kk26xAt3ZAVk_A-tNYszBQM7rf2t31jpmuxwgwhGIRxYGryB93H1sRHb0s"
TOAST_API = "https://ws-api.toasttab.com"

# ---------- AUTHENTICATE ----------
try:
    auth_response = requests.post(
        f"{TOAST_API}/authentication/v1/authentication/login",
        json={
            "userAccessType": "TOAST_MACHINE_CLIENT",
            "clientId": TOAST_CLIENT_ID,
            "clientSecret": TOAST_CLIENT_SECRET
        }
    )
    auth_response.raise_for_status()
    access_token = auth_response.json()['token']['accessToken']
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Toast-Restaurant-External-ID": RESTAURANT_ID
    }
    print("‚úÖ Authenticated successfully!")
except Exception as e:
    raise SystemExit(f"‚ùå Authentication failed: {e}")

# ---------- TIME RANGE (Texas 8 AM yesterday to 8 AM today) ----------
central = pytz.timezone("America/Chicago")
now_ct = datetime.datetime.now(central)

start_time_ct = (now_ct - datetime.timedelta(days=1)).replace(hour=8, minute=0, second=0, microsecond=0)
end_time_ct = now_ct.replace(hour=8, minute=0, second=0, microsecond=0)

start_date = start_time_ct.astimezone(pytz.utc).strftime("%Y-%m-%dT%H:%M:%S.000+0000")
end_date = end_time_ct.astimezone(pytz.utc).strftime("%Y-%m-%dT%H:%M:%S.000+0000")

# ---------- FETCH & UPSERT EMPLOYEES ----------
try:
    print("üì• Fetching employees...")
    resp = requests.get(f"{TOAST_API}/labor/v1/employees", headers=headers)
    resp.raise_for_status()
    employees = resp.json()

    emp_rows = [{
        "guid": emp.get("guid"),
        "first_name": emp.get("firstName", ""),
        "last_name": emp.get("lastName", ""),
        "email": emp.get("email", ""),
        "external_employee_id": emp.get("externalEmployeeId") or emp.get("externalId"),
        "is_active": not emp.get("deleted", False)
    } for emp in employees if emp.get("guid")]

    if emp_rows:
        supabase.table("toast_employees_baby_acapulco").upsert(emp_rows, on_conflict=["guid"]).execute()
        print(f"‚úÖ Uploaded {len(emp_rows)} employees to Supabase.")
except Exception as e:
    print(f"‚ùå Error processing employees: {e}")

# ---------- FETCH & UPSERT JOBS ----------
try:
    print("üì• Fetching job titles...")
    resp = requests.get(f"{TOAST_API}/labor/v1/jobs", headers=headers)
    resp.raise_for_status()
    jobs = resp.json()

    job_rows = [{
        "guid": job.get("guid"),
        "title": job.get("title"),
        "is_deleted": job.get("deleted", False)
    } for job in jobs if job.get("guid")]

    if job_rows:
        supabase.table("toast_jobs_baby_acapulco").upsert(job_rows, on_conflict=["guid"]).execute()
        print(f"‚úÖ Uploaded {len(job_rows)} jobs to Supabase.")
except Exception as e:
    print(f"‚ùå Error processing jobs: {e}")

# ---------- FETCH & UPSERT TIME ENTRIES ----------
try:
    print(f"üì• Fetching time entries from {start_date} to {end_date}...")
    resp = requests.get(
        f"{TOAST_API}/labor/v1/timeEntries",
        headers=headers,
        params={"restaurantGuid": RESTAURANT_ID, "startDate": start_date, "endDate": end_date}
    )
    resp.raise_for_status()
    entries = resp.json()
    print(f"‚úÖ Retrieved {len(entries)} time entries.")

    rows_to_insert = []
    for entry in entries:
        if entry.get("guid"):
            rows_to_insert.append({
                "guid": entry.get("guid"),
                "employee_guid": entry.get("employeeReference", {}).get("guid"),
                "job_guid": entry.get("jobReference", {}).get("guid"),
                "in_time": entry.get("inDate"),
                "out_time": entry.get("outDate"),
                "regular_hours": entry.get("regularHours"),
                "overtime_hours": entry.get("overtimeHours"),
                "hourly_wage": entry.get("hourlyWage"),
                "total_tips": (entry.get("nonCashTips") or 0) + (entry.get("cashGratuityServiceCharges") or 0),
                "non_cash_sales": entry.get("nonCashSales"),
                "cash_sales": entry.get("cashSales"),
            })

    if rows_to_insert:
        supabase.table("toast_time_entries_baby_acapulco").upsert(rows_to_insert, on_conflict=["guid"]).execute()
        print(f"‚úÖ Uploaded {len(rows_to_insert)} time entries to Supabase.")
    else:
        print("‚ö†Ô∏è No valid time entries to upload.")
except Exception as e:
    print(f"‚ùå Error processing time entries: {e}")